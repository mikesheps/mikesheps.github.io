'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _fs = require('fs');

var _findUp = require('find-up');

var _lodash = require('lodash');

var _jsYaml = require('js-yaml');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = initialize;


function initialize() {
  var configType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'js';

  var packageJsonPath = (0, _findUp.sync)('package.json');
  var packageJson = require(packageJsonPath); // eslint-disable-line global-require
  var scripts = packageJson.scripts;

  packageJson.scripts = {
    start: 'nps',
    test: scripts.test ? 'nps test' : undefined
  };
  (0, _fs.writeFileSync)(packageJsonPath, JSON.stringify(packageJson, null, 2));

  if (configType === 'yaml') {
    return dumpYAMLConfig(packageJsonPath, scripts);
  }

  return dumpJSConfig(packageJsonPath, scripts);
}

function dumpJSConfig(packageJsonPath, scripts) {
  var packageScriptsPath = (0, _path.resolve)((0, _path.dirname)(packageJsonPath), './package-scripts.js');
  var fileContents = generatePackageScriptsFileContents(scripts);
  (0, _fs.writeFileSync)(packageScriptsPath, fileContents);

  return { packageJsonPath: packageJsonPath, packageScriptsPath: packageScriptsPath };
}

function dumpYAMLConfig(packageJsonPath, scripts) {
  var packageScriptsPath = (0, _path.resolve)((0, _path.dirname)(packageJsonPath), './package-scripts.yml');
  var fileContents = (0, _jsYaml.safeDump)({ scripts: structureScripts(scripts) });
  (0, _fs.writeFileSync)(packageScriptsPath, fileContents);

  return { packageJsonPath: packageJsonPath, packageScriptsPath: packageScriptsPath };
}

function generatePackageScriptsFileContents(scripts) {
  var indent = '    '; // start at 4 spaces because we're inside another object
  var structuredScripts = structureScripts(scripts);
  var objectString = jsObjectStringify(structuredScripts, indent);
  return 'module.exports = {\n  scripts: {' + objectString + '\n  }\n};\n';
}

function structureScripts(scripts) {
  // start out by giving every script a `default`
  var defaultedScripts = Object.keys(scripts).reduce(function (obj, key) {
    var keyParts = key.split(':');
    var deepKey = [].concat(_toConsumableArray(keyParts), ['default']).join('.');
    if (key.indexOf('start') === 0) {
      deepKey = ['default'].concat(_toConsumableArray(keyParts.slice(1, keyParts.length)), ['default']).join('.');
    }
    var script = scripts[key];
    (0, _lodash.set)(obj, deepKey, script);
    return obj;
  }, {});
  // traverse the object and replace all objects that only have `default` with just the script itself.
  traverse(defaultedScripts, removeDefaultOnly);
  return defaultedScripts;

  function removeDefaultOnly(key, value, object) {
    if (isOnlyDefault(value)) {
      object[key] = value.default;
    }
  }
}

function traverse(object, fn) {
  (0, _lodash.each)(object, function (value, key) {
    // we don't need to worry about a recursive structure in this case
    fn(key, value, object);
    value = object[key]; // may have changed from `fn`
    if ((0, _lodash.isPlainObject)(value)) {
      traverse(value, fn);
    }
  });
}

function jsObjectStringify(object, indent) {
  return Object.keys(object).reduce(function (string, key, index) {
    var script = object[key];
    var value = void 0;
    if ((0, _lodash.isPlainObject)(script)) {
      value = '{' + jsObjectStringify(script, indent + '  ') + '\n' + indent + '}';
    } else {
      value = '\'' + escapeSingleQuote(script) + '\'';
    }
    var camelKey = (0, _lodash.camelCase)(key);
    var comma = isLast(object, index) ? '' : ',';
    return string + '\n' + indent + camelKey + ': ' + value + comma;
  }, '');
}

function isOnlyDefault(script) {
  return (0, _lodash.isPlainObject)(script) && Object.keys(script).length === 1 && script.default;
}

function escapeSingleQuote(string) {
  return string.replace(/'/g, '\\\'');
}

function isLast(object, index) {
  return Object.keys(object).length - 1 === index;
}