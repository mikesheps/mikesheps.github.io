'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadConfig = exports.preloadModule = exports.getModuleRequirePath = exports.installAutocomplete = exports.autocomplete = exports.help = exports.initialize = exports.getScriptsAndArgs = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _path = require('path');

var _fs = require('fs');

var _lodash = require('lodash');

var _shellEscape = require('shell-escape');

var _shellEscape2 = _interopRequireDefault(_shellEscape);

var _safe = require('colors/safe');

var _safe2 = _interopRequireDefault(_safe);

var _jsYaml = require('js-yaml');

var _getLogger = require('../get-logger');

var _getLogger2 = _interopRequireDefault(_getLogger);

var _resolveScriptObjectToString = require('../resolve-script-object-to-string');

var _initialize = require('./initialize');

var _initialize2 = _interopRequireDefault(_initialize);

var _autocomplete = require('./autocomplete');

var _autocomplete2 = _interopRequireDefault(_autocomplete);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var log = (0, _getLogger2.default)();

/**
 * Attempts to load the given module. This is used for the --require functionality of the CLI
 * @param  {String} moduleName The module to attempt to require
 * @return {*} The required module
 */
var preloadModule = getAttemptModuleRequireFn(function (moduleName, requirePath) {
  log.warn({
    message: _safe2.default.yellow('Unable to preload "' + moduleName + '". Attempted to require as "' + requirePath + '"'),
    ref: 'unable-to-preload-module'
  });
  return undefined;
});

var loadJSConfig = getAttemptModuleRequireFn(function onFail(configPath, requirePath) {
  log.error({
    message: _safe2.default.red('Unable to find JS config at "' + configPath + '". Attempted to require as "' + requirePath + '"'),
    ref: 'unable-to-find-config'
  });
  return undefined;
});

/**
 * Attempts to load the config and logs an error if there's a problem
 * @param  {String} configPath The path to attempt to require the config from
 * @return {*} The required module
 */
function loadConfig(configPath) {
  if (configPath.endsWith('.yml')) {
    return loadYAMLConfig(configPath);
  }

  return loadJSConfig(configPath);
}

exports.getScriptsAndArgs = getScriptsAndArgs;
exports.initialize = _initialize2.default;
exports.help = help;
exports.autocomplete = _autocomplete2.default;
exports.installAutocomplete = _autocomplete.install;
exports.getModuleRequirePath = getModuleRequirePath;
exports.preloadModule = preloadModule;
exports.loadConfig = loadConfig;

/****** implementations ******/

function loadYAMLConfig(configPath) {
  try {
    return (0, _jsYaml.safeLoad)((0, _fs.readFileSync)(configPath, 'utf8'));
  } catch (e) {
    if (e.constructor.name === 'YAMLException') {
      throw e;
    }
    log.error({
      message: _safe2.default.red('Unable to find YML config at "' + configPath + '".'),
      ref: 'unable-to-find-config'
    });
    return undefined;
  }
}

function getScriptsAndArgs(program) {
  var scripts = [];
  var args = '';
  var rawArgs = program.rawArgs;

  var parallel = !(0, _lodash.isEmpty)(program.parallel);
  if (parallel) {
    scripts = program.parallel.split(',');
    args = getArgs(program.args, program.rawArgs, scripts);
  } else if (!(0, _lodash.isEmpty)(program.args)) {
    (function () {
      var _program$args = _slicedToArray(program.args, 1),
          scriptsString = _program$args[0];

      scripts = scriptsString.split(',');
      (0, _lodash.remove)(rawArgs, function (arg) {
        return arg === scriptsString;
      });
      args = getArgs(program.args.slice(1), rawArgs, scripts);
    })();
  }
  return { scripts: scripts, args: args, parallel: parallel };
}

function getArgs(args, rawArgs, scripts) {
  var allArgs = rawArgs.slice(2);
  var psArgs = ['-p', '--parallel', '-c', '--config', '-r', '--require'];
  var psFlags = ['-s', '--silent'];
  var cleanedArgs = (0, _lodash.remove)(allArgs, function (item, index, array) {
    var isArgOrFlag = (0, _lodash.includes)(psArgs, item) || (0, _lodash.includes)(psFlags, item);
    var isArgValue = (0, _lodash.includes)(psArgs, array[index - 1]);
    var isInScripts = (0, _lodash.includes)(scripts, item);
    return !isArgOrFlag && !isArgValue && !isInScripts;
  });
  return (0, _shellEscape2.default)(cleanedArgs);
}

/**
 * Determines the proper require path for a module. If the path starts with `.` then it is resolved with process.cwd()
 * @param  {String} moduleName The module path
 * @return {String} the module path to require
 */
function getModuleRequirePath(moduleName) {
  return moduleName[0] === '.' ? (0, _path.resolve)(process.cwd(), moduleName) : moduleName;
}

function getAttemptModuleRequireFn(onFail) {
  return function attemptModuleRequire(moduleName) {
    var requirePath = getModuleRequirePath(moduleName);
    try {
      return requireDefaultFromModule(requirePath);
    } catch (e) {
      if (e.constructor.name === 'SyntaxError') {
        throw e;
      }
      return onFail(moduleName, requirePath);
    }
  };
}

/**
 * Requires the given module and returns the `default` if it's an `__esModule`
 * @param  {String} modulePath The module to require
 * @return {*} The required module (or it's `default` if it's an `__esModule`)
 */
function requireDefaultFromModule(modulePath) {
  var mod = require(modulePath); // eslint-disable-line global-require
  if (mod.__esModule) {
    return mod.default;
  } else {
    return mod;
  }
}

function help(_ref) {
  var scripts = _ref.scripts;

  var availableScripts = getAvailableScripts(scripts);
  var filteredScripts = availableScripts.filter(function (script) {
    return !script.hiddenFromHelp;
  });
  var scriptLines = filteredScripts.map(function (_ref2) {
    var name = _ref2.name,
        description = _ref2.description,
        script = _ref2.script;

    var coloredName = _safe2.default.green(name);
    var coloredScript = _safe2.default.gray(script);
    var line = void 0;
    if (description) {
      line = [coloredName, _safe2.default.white(description), coloredScript];
    } else {
      line = [coloredName, coloredScript];
    }
    return line.join(' - ').trim();
  });
  if (scriptLines.length) {
    var topMessage = 'Available scripts (camel or kebab case accepted)';
    var message = topMessage + '\n\n' + scriptLines.join('\n');
    return message;
  } else {
    return _safe2.default.yellow('There are no scripts available');
  }
}

function getAvailableScripts(config) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var excluded = ['description', 'script', 'default'];
  return Object.keys(config).reduce(function (scripts, key) {
    var val = config[key];
    if ((0, _lodash.includes)(excluded, key)) {
      return scripts;
    }
    var scriptObj = (0, _resolveScriptObjectToString.resolveScriptObjectToScript)(val);
    var prefixed = [].concat(_toConsumableArray(prefix), [key]);
    if (scriptObj) {
      var description = scriptObj.description,
          script = scriptObj.script,
          _scriptObj$hiddenFrom = scriptObj.hiddenFromHelp,
          hiddenFromHelp = _scriptObj$hiddenFrom === undefined ? false : _scriptObj$hiddenFrom;

      scripts = [].concat(_toConsumableArray(scripts), [{ name: prefixed.join('.'), description: description, script: script, hiddenFromHelp: hiddenFromHelp }]);
    }
    if ((0, _lodash.isPlainObject)(val)) {
      return [].concat(_toConsumableArray(scripts), _toConsumableArray(getAvailableScripts(val, prefixed)));
    }
    return scripts;
  }, []);
}