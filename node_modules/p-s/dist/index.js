'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spawnCommandWithKill = require('spawn-command-with-kill');

var _spawnCommandWithKill2 = _interopRequireDefault(_spawnCommandWithKill);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _safe = require('colors/safe');

var _safe2 = _interopRequireDefault(_safe);

var _lodash = require('lodash');

var _findUp = require('find-up');

var _managePath = require('manage-path');

var _managePath2 = _interopRequireDefault(_managePath);

var _arrify = require('arrify');

var _arrify2 = _interopRequireDefault(_arrify);

var _getScriptToRun = require('./get-script-to-run');

var _getScriptToRun2 = _interopRequireDefault(_getScriptToRun);

var _getScriptsFromConfig = require('./get-scripts-from-config');

var _getScriptsFromConfig2 = _interopRequireDefault(_getScriptsFromConfig);

var _getLogger = require('./get-logger');

var _getLogger2 = _interopRequireDefault(_getLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NON_ERROR = 0;

exports.default = runPackageScripts;


function runPackageScripts(_ref) {
  var scriptConfig = _ref.scriptConfig,
      scripts = _ref.scripts,
      args = _ref.args,
      _ref$options = _ref.options,
      options = _ref$options === undefined ? {} : _ref$options;

  if (scripts.length === 0) {
    scripts = ['default'];
  }
  var scriptNames = (0, _arrify2.default)(scripts);
  if (options.parallel) {
    return runParallel();
  } else {
    return runSeries();
  }

  function runSeries() {
    return scriptNames.reduce(function (res, scriptName) {
      return res.then(function () {
        return runPackageScript({ scriptConfig: scriptConfig, options: options, scriptName: scriptName, args: args });
      });
    }, _bluebird2.default.resolve());
  }

  function runParallel() {
    var results = scriptNames.map(function (script) {
      return { script: script, code: undefined };
    });
    var aborted = false;

    var promises = scriptNames.map(function (scriptName) {
      return runPackageScript({ scriptConfig: scriptConfig, options: options, scriptName: scriptName, args: args });
    });

    var allPromise = _bluebird2.default.all(promises.map(function (promise, index) {
      return promise.then(function (code) {
        results[index].code = code;
      });
    })).then(function () {
      return results;
    });

    allPromise.catch(function () {
      /* istanbul ignore if */
      if (aborted) {
        // this is very unlikely to happen
      } else {
        abortAll();
      }
    });

    return allPromise;

    function abortAll() {
      aborted = true;
      promises.forEach(function (p) {
        return p.abort();
      });
    }
  }
}

function runPackageScript(_ref2) {
  var scriptConfig = _ref2.scriptConfig,
      options = _ref2.options,
      scriptName = _ref2.scriptName,
      args = _ref2.args;

  var scripts = (0, _getScriptsFromConfig2.default)(scriptConfig, scriptName);
  var script = (0, _getScriptToRun2.default)(scripts, scriptName);
  if (!(0, _lodash.isString)(script)) {
    return _bluebird2.default.reject({
      message: _safe2.default.red('Scripts must resolve to strings. There is no script that can be resolved from "' + scriptName + '"'),
      ref: 'missing-script'
    });
  }
  var command = [script, args].join(' ').trim();
  var log = (0, _getLogger2.default)(getLogLevel(options));
  log.info(_safe2.default.gray('nps executing: ') + _safe2.default.green(command));
  var child = void 0;
  var promise = new _bluebird2.default(function (resolve, reject) {
    child = (0, _spawnCommandWithKill2.default)(command, { stdio: 'inherit', env: getEnv() });

    child.on('error', function (error) {
      child = null;
      reject({
        message: _safe2.default.red('The script called "' + scriptName + '" which runs "' + command + '" emitted an error'),
        ref: 'emitted-an-error',
        error: error
      });
    });

    child.on('close', function (code) {
      child = null;
      if (code === NON_ERROR) {
        resolve(code);
      } else {
        reject({
          message: _safe2.default.red('The script called "' + scriptName + '" which runs "' + command + '" failed with exit code ' + code),
          ref: 'failed-with-exit-code',
          code: code
        });
      }
    });
  });

  promise.abort = function abort() {
    if (child !== null) {
      child.kill();
      child = null;
    }
  };

  return promise;
}

function getLogLevel(_ref3) {
  var silent = _ref3.silent,
      logLevel = _ref3.logLevel;

  if (logLevel) {
    return logLevel;
  } else if (silent) {
    return 'disable';
  } else {
    return undefined;
  }
}

function getEnv() {
  var env = (0, _lodash.clone)(process.env);
  var alterPath = (0, _managePath2.default)(env);
  var npmBin = (0, _findUp.sync)('node_modules/.bin');
  if (npmBin) {
    alterPath.unshift(npmBin);
  }
  return env;
}